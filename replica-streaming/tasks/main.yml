# (c) Copyright 2016 DataNexus Inc.  All Rights Reserved. 
#
# streaming tasks for the replica
---

- name: Preserve postgresql.conf
  command: /bin/cp {{ postgresql_config_path }}/postgresql.conf /tmp
  become: true
  become_user: "{{ postgresql_user }}"
  
- name: Remove data directory in preparation for streaming
  file:
    path: "{{ postgresql_data_dir }}"  
    state: absent
  become: true
  
- name: Ensure PostgreSQL data directory exists.
  file:
    path: "{{ postgresql_data_dir }}"
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    state: directory
    mode: 0700
  become: true
  
- set_fact: master_server={{ hostvars[inventory_hostname].groups.tag_Role_master[0] }}
  when: hostvars[inventory_hostname].groups.tag_Role_master[0] is defined

- name: copy initial database
  command: "/bin/pg_basebackup -h {{ hostvars[master_server].ansible_eth1.ipv4.address }} -D {{ postgresql_data_dir }} -U replicator -v -P --xlog-method=stream"
  become: true
  become_user: "{{ postgresql_user }}"
  when: master_server is defined

- name: Restore postgresql.conf
  command: /bin/cp /tmp/postgresql.conf {{ postgresql_config_path }}
  become: true
  become_user: "{{ postgresql_user }}"
  
- name: build recovery file
  blockinfile:
    name: "{{ postgresql_config_path }}/recovery.conf"
    mode: 0600
    create: yes
    block: |
      standby_mode = 'on'
      primary_conninfo = 'host={{ hostvars[master_server].ansible_eth1.ipv4.address }} port=5432 user=replicator'
      trigger_file = '/tmp/postgresql.trigger'
  become: true
  become_user: "{{ postgresql_user }}"
  when: master_server is defined

- name: Fix SE Linux labels on {{ postgresql_data_dir }}
  become: true
  command: "/usr/sbin/fixfiles -F restore \"{{ postgresql_data_dir }}\""
  when: ansible_selinux.status == "enabled"
  
- name: configure write ahead log for streaming
  lineinfile:
    dest: "{{ postgresql_config_path }}/postgresql.conf"
    regexp: "^#wal_level"
    line: "wal_level = hot_standby\t\t\t# minimal, archive, or hot_standby"
  become: true
  notify: restart postgresql

- name: configure write ahead log senders
  lineinfile:
    dest: "{{ postgresql_config_path }}/postgresql.conf"
    regexp: "^#max_wal_senders"
    line: "max_wal_senders = 3\t\t# max number of walsender processes"
  become: true
  notify: restart postgresql

- name: configure checkpoint segments
  lineinfile:
    dest: "{{ postgresql_config_path }}/postgresql.conf"
    regexp: "^#checkpoint_segments"
    line: "checkpoint_segments = 8\t\t\t# in logfile segments, min 1, 16MB each"
  become: true
  notify: restart postgresql
  
- name: configure write ahead log keep segments
  lineinfile:
    dest: "{{ postgresql_config_path }}/postgresql.conf"
    regexp: "^#wal_keep_segments"
    line: "wal_keep_segments = 8\t\t# in logfile segments, 16MB each; 0 disables"
  become: true
  notify: restart postgresql

- name: turn on hot standby
  lineinfile:
    dest: "{{ postgresql_config_path }}/postgresql.conf"
    regexp: "^#hot_standby ="
    line: "hot_standby = on\t\t\t# \"on\" allows queries during recovery"
  become: true
  notify: restart postgresql